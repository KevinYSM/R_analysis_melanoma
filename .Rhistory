gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 60, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
library("ggfortify")
gene_counts_df<-get_RPKM_normalised_data()
pca_res<-prcomp(gene_counts_df, scale. = TRUE)
oncogenes_df<-get_oncogenes_df()
library("ggfortify")
gene_counts_df<-get_RPKM_normalised_data()
oncogenes_df<-get_oncogenes_df()
pca_res<-prcomp(oncogenes_df, scale. = TRUE)
autoplot(pca_res, data=oncogenes_df, colour='col')
autoplot(pca_res, data=oncogenes_df, colour=colnames(oncogenes_df))
View(oncogenes_df)
iris
autoplot(pca_res)
autoplot(pca_res, data=oncogenes_df, colour=colnames(oncogenes_df), label=TRUE)
autoplot(pca_res, data=oncogenes_df,  label=TRUE)
autoplot(pca_res, data=oncogenes_df,  label=TRUE,label.size = 3)
autoplot(pca_res, data=oncogenes_df,  label=TRUE,label.size = 3, loadings=TRUE)
autoplot(kmeans(oncogenes_df, 3), data = oncogenes_df)
autoplot(kmeans(oncogenes_df, 5), data = oncogenes_df)
rm(list=ls())
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("maftools")
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
#setnames(gene_counts_df,NULL,"gene")
#colnames(gene_counts_df)[0]<-"genes"
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
#return(gene_counts_df)
}
get_gene_lengths <- function(){
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
return(gene_lengths)
}
get_RPKM_normalised_data<-function(){
gene_counts_df<-open_gene_counts()
gene_lengths<-get_gene_lengths()
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#need to get counts in each row
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
#2. Divide the read counts by the “per million” scaling factor. This normalizes for sequencing depth, giving you reads per million (RPM)
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/(longest_isoform_length/1000)
}
#Remove N/A rows
normalised_gene_counts_df<-na.omit(normalised_gene_counts_df)
return(normalised_gene_counts_df)
}
get_oncogenes_df <- function() {
oncogene_data<-read.csv("scripts/melanoma_genes_heatmap/Census_allSun Jan 15 04_37_51 2023.csv")
num_cols<-length(colnames(oncogene_data))
num_rows<-length(rownames(oncogene_data))
oncogenes<-list()
for (i in (1:num_rows)){
tumour_types<-oncogene_data[i,10]
if (grepl("melanoma",tumour_types,fixed = TRUE)){
oncogenes<-append(oncogenes,oncogene_data[i,1])
}
}
normalised_gene_counts_df<-get_RPKM_normalised_data()
filtered_gene_counts_df<-subset(normalised_gene_counts_df, rownames(normalised_gene_counts_df) %in% oncogenes)
return(filtered_gene_counts_df)
}
oncogenes<-get_oncogenes_df()
library("ggfortify")
gene_counts_df<-scale(get_RPKM_normalised_data())
View(oncogenes)
View(oncogenes)
coefficient_variation_df<-apply(gene_counts_df,1,sd)/rowMeans(gene_counts_df)
hist(coefficient_variation_df)
help(hist)
hist(coefficient_variation_df, breaks="1000")
hist(coefficient_variation_df, breaks=1000)
hist(coefficient_variation_df, breaks=100)
hist(coefficient_variation_df, breaks=10)
hist(coefficient_variation_df, breaks=1)
sort(coefficient_variation_df)
head(coefficient_variation_df)
View(gene_counts_df)
library("ggfortify")
gene_counts_df<-open_gene_counts()
coefficient_variation_df<-apply(gene_counts_df,1,sd)/rowMeans(gene_counts_df)
hist(coefficient_variation_df, breaks=1)
sort(coefficient_variation_df)
head(coefficient_variation_df)
hist(coefficient_variation_df, breaks=10)
hist(coefficient_variation_df, breaks=30)
help(sort)
sort(coefficient_variation_df, decreasing=TRUE)
View(gene_counts_df)
pca_res
#get_RPKM_normalised_data<-function(){
gene_counts_df<-open_gene_counts()
View(gene_counts_df)
gene_lengths<-get_gene_lengths()
View(gene_lengths)
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
gene_counts_df[5,]
colSums(gene_counts_df[5,])
View(gene_lengths)
(colSums(gene_counts_df))/((2187/1000)*(colSums(gene_counts_df)/1000000)
(colSums(gene_counts_df))/((2187/1000)*(colSums(gene_counts_df)/1000000))
(gene_counts_df[5,])/((2187/1000)*(colSums(gene_counts_df)/1000000))
View(normalised_gene_counts_df)
rpkm_data<-get_RPKM_normalised_data()
View(gene_lengths)
(gene_counts_df["CDH10",])/((3436/1000)*(colSums(gene_counts_df)/1000000))
sd(oncogenes)
rpkm_data<-get_RPKM_normalised_data()
View(gene_counts_df)
View(gene_counts_df)
View(normalised_gene_counts_df)
View(rpkm_data)
RPKM_gene_counts_df<-get_RPKM_normalised_data()
#FILTER BOTTOM 50% of genes based on mean expression
MEAN_df<-apply(RPKM_gene_counts_df,1,mean)
head(MEAN_df)
MEAN_df
MEAN_df[1,]
MEAN_df[0,]
MEAN_df[2,1]
MEAN_df[1]
colnames(MEAN_df)
colNames(MEAN_df)
rowNames(MEAN_df)
rownames(MEAN_df)
typeof(MEAN_df)
MEAN_df["names"]
MEAN_df[1]
MEAN_df[2]
MEAN_df[2][1]
MEAN_df[2][2]
MEAN_df[2,1]
is.data.frame(MEAN_df)
MEAN_df[names]
MEAN_df.names
MEAN_df
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
View(MEAN_df)
colnames(mean_df)
rownames(MEAN_df)
View(MEAN_df)
MEAN_df
order(MEAN_df)
View(MEAN_df)
order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`)
a<-order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`)
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`),]
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
a<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
View(MEAN_df)
MEAN_df<-MEAN_df[order(`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-MEAN_df[order(`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`),]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`),]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
View(MEAN_df)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-MEAN_df[order(MEAN_df[,1], decreasing=TRUE),]
MEAN_df[1]
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(MEAN_df[order(MEAN_df[,1], decreasing=TRUE),])
View(MEAN_df)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-as.data.frame(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-as.data.frame(MEAN_df[order(MEAN_df$`apply(RPKM_gene_counts_df, 1, mean)`, decreasing=TRUE),])
View(MEAN_df)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
View(MEAN_df)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1],descending=TRUE),)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1]),)
View(MEAN_df)
MEAN_df<-data.matrix(sort(MEAN_df[,1], descending=TRUE),)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=FALSE),)
View(MEAN_df)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
MEAN_df[1,]
colnames(MEAN_df)
rownames(MEAN_df)
top_20000_genes<-lapply(rownames(MEAN_df),head,n=20000)
View(top_20000_genes)
top_20000_genes<-lapply(rownames(MEAN_df),head,n=20)
top_20000_genes<-lapply(rownames(MEAN_df),head,n=20)
top_20000_genes<-lapply(rownames(MEAN_df),'[',n=20)
top_20000_genes<-lapply(rownames(MEAN_df),'[',n=20)
top_20000_genes<-sapply(rownames(MEAN_df),'[',n=20)
top_20000_genes<-lapply(rownames(MEAN_df),'[',n=20)
top_20000_genes<-head(rownames(MEAN_df),20000)
top_20000_genes[1]
top_20000_genes[0]
#log2RPKM analysis of data
log2_RPKM_data<-data.matrix(RPKM_gene_counts_df<-log2(RPKM_gene_counts_df+1))
top_20000_genes<-data.matrix(head(rownames(MEAN_df),20000))
View(top_20000_genes)
top_20000_genes[1]
top_20000_genes[2]
filtered_expression_df<-subset(MEAN_df, rownames(MEAN_df) %in% top_20000_genes)
View(filtered_expression_df)
top_20000_genes<-data.matrix(head(rownames(MEAN_df),20000))
filtered_expression_df<-subset(MEAN_df, rownames(MEAN_df) %in% top_20000_genes)
filtered_expression_df<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_20000_genes)
#KEEP TOP 200000 genes based on gene expression
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_20000_genes<-data.matrix(head(rownames(MEAN_df),20000))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_20000_genes)
#FILTER GENES EXPRESSED IN LESS THAN 50% of samples
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1>0)>=5]
#FILTER GENES EXPRESSED IN LESS THAN 50% of samples
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1)>0)>=5]
#FILTER GENES EXPRESSED IN LESS THAN 50% of samples
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=5,]
View(filtered_expression_df_2)
#KEEP TOP N genes based on gene expression
N=15000
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
#FILTER GENES EXPRESSED IN LESS THAN X samples
X=5
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
#KEEP TOP N genes based on gene expression
N=10000
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
#FILTER GENES EXPRESSED IN LESS THAN X samples
X=5
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
#KEEP TOP N genes based on gene expression
N=20000
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
#FILTER GENES EXPRESSED IN LESS THAN X samples
X=6
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
#KEEP TOP N genes based on gene expression
N=20000
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
#FILTER GENES EXPRESSED IN LESS THAN X samples
X=7
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
#KEEP TOP N genes based on gene expression
N=20000
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
#FILTER GENES EXPRESSED IN LESS THAN X samples
X=8
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
help(seq)
#KEEP TOP N genes based on gene expression
N_values<-seq(15000,20000,1000)
install.packages("plot3D")
help(data.frame)
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[N+X,]<-c(N,X,length(filtered_expression_df_2))
}
}
View(filtration_results)
length(N_values)*length(X_values)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
index=0
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[index,]<-c(N,X,length(filtered_expression_df_2))
index<-index+1
}
}
View(filtration_results)
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
index=0
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[index,]<-c(N,X,numrows(filtered_expression_df_2))
index<-index+1
}
}
View(filtration_results)
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
index=0
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[index,]<-c(N,X,length(rownames(filtered_expression_df_2)))
index<-index+1
}
}
View(filtration_results)
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
index=1
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[index,]<-c(N,X,length(rownames(filtered_expression_df_2)))
index<-index+1
}
}
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
rownames(filtration_results)<-c("Top X Genes","Less than Y samples","Gene Count")
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
index=1
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[index,]<-c(N,X,length(rownames(filtered_expression_df_2)))
index<-index+1
}
}
#DETERMINE OPTIMUM FILTRATION VALUES
library("plot3D")
N_values<-seq(15000,20000,1000)
X_values<-seq(3,10)
filtration_results<-data.frame(matrix(ncol=3, nrow=length(N_values)*length(X_values)))
colnames(filtration_results)<-c("Top X Genes","Less than Y samples","Gene Count")
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
index=1
for (N in N_values){
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
for (X in X_values){
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
filtration_results[index,]<-c(N,X,length(rownames(filtered_expression_df_2)))
index<-index+1
}
}
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`)
help(lines3D)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2")
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=10)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=2, phi=20
)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=2, phi=30
)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=2, phi=0
)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=90, phi=0
)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=60, phi=0
)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=120, phi=0
)
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=200, phi=0
)
12
12
lines3D(filtration_results$`Top X Genes`,filtration_results$`Less than Y samples`,filtration_results$`Gene Count`, main="Gene Filtration Results", bty="b2", theta=10, phi=0
)
View(filtration_results)
View(filtration_results)
View(filtration_results)
write.csv(DataFrame filtration_results,"./filtration_results.csv")
write.csv(DataFrame filtration_results,"filtration_results.csv")
write.csv(filtration_results,"filtration_results.csv")
N=15000
MEAN_df<-data.matrix(apply(RPKM_gene_counts_df,1,mean))
MEAN_df<-data.matrix(sort(MEAN_df[,1], decreasing=TRUE),)
top_N_genes<-data.matrix(head(rownames(MEAN_df),N))
filtered_expression_df_1<-subset(RPKM_gene_counts_df, rownames(RPKM_gene_counts_df) %in% top_N_genes)
#FILTER GENES EXPRESSED IN LESS THAN X samples
X=5
filtered_expression_df_2<-filtered_expression_df_1[rowSums(filtered_expression_df_1 > 0)>=X,]
#log2RPKM analysis of data
log2_RPKM_data<-log2(filtered_expression_df_2+1)
View(log2_RPKM_data)
#log2RPKM analysis of data
log2_RPKM_data<-log2(filtered_expression_df_2+1)
coefficient_variation_df<-apply(log2_RPKM_data,1,sd)/rowMeans(log2_RPKM_data)
hist(coefficient_variation_df, breaks=30)
sort(coefficient_variation_df, decreasing=TRUE)
head(coefficient_variation_df)
head(sort(coefficient_variation_df, decreasing=TRUE))
head(sort(coefficient_variation_df, decreasing=TRUE), 50)
