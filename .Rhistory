num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/(longest_isoform_length/1000)
}
View(normalised_gene_counts_df)
normalised_gene_counts_df[1]
normalised_gene_counts_df[1,]
normalised_gene_counts_df[1,1]
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
library("pheatmap")
install.package("pheatmap")
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
is.na(normalised_gene_counts_df) %>% table()
View(normalised_gene_counts_df_1)
View(normalised_gene_counts_df)
View(gene_counts_df)
View(gene_lengths)
View(gene_lengths)
View(normalised_gene_counts_df)
is.na(normalised_gene_counts_df)
is.na(normalised_gene_counts_df).sum()
normalised_gene_counts_df[,1]
normalised_gene_counts_df[1,]
normalised_gene_counts_df.isna().sum()
colSums(is.na(normalised_gene_counts_df))
rowNames(normalised_gene_counts_df).length()
rowNames(normalised_gene_counts_df).length
length(rowNames(normalised_gene_counts_df))
length(rownames(normalised_gene_counts_df))
length(rownames(gene_lengths))
View(gene_lengths)
View(counts_column)
#Remove N/A rows
na.omit(normalised_gene_counts_df)
#Remove N/A rows
remove_na<-na.omit(normalised_gene_counts_df)
View(remove_na)
View(normalised_gene_counts_df_1)
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
#Remove N/A rows
normalised_gene_counts_df<-na.omit(normalised_gene_counts_df)
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
pheatmap(cor(normalised_gene_counts_df))
cor(normalised_gene_counts_df)
man(cor())
help(cor)
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
cols
gene_counts_df
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/(longest_isoform_length/1000)
}
#Remove N/A rows
normalised_gene_counts_df<-na.omit(normalised_gene_counts_df)
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
devtools::install(C:\Users\kevin\Documents\GitHub\rnaSeqPanCanClassifier)
devtools::install(C:/Users/kevin/Documents/GitHub/rnaSeqPanCanClassifier)
getwd()
devtools::install("C:/Users/kevin/Documents/GitHub/rnaSeqPanCanClassifier")
install.packages("devtools")
pheatmap(cor(normalised_gene_counts_df))
install.packages(devtools)
install.packages("devtools")
devtools::install("C:/Users/kevin/Documents/GitHub/rnaSeqPanCanClassifier")
install.packages("installr")
library(installr)
updateR()
library("ggfortify")
gene_counts_df<-get_RPKM_normalised_data()
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
return(gene_counts_df)
}
rm(list=ls())
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
return(gene_counts_df)
}
get_gene_lengths <- function(){
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
return(gene_lengths)
}
get_RPKM_normalised_data<-function(){
gene_counts_df<-open_gene_counts()
gene_lengths<-get_gene_lengths()
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#need to get counts in each row
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
#2. Divide the read counts by the “per million” scaling factor. This normalizes for sequencing depth, giving you reads per million (RPM)
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/(longest_isoform_length/1000)
}
#Remove N/A rows
normalised_gene_counts_df<-na.omit(normalised_gene_counts_df)
return(normalised_gene_counts_df)
}
library("ggfortify")
gene_counts_df<-get_RPKM_normalised_data()
View(gene_counts_df)
View(gene_counts_df)
View(gene_counts_df)
gene_counts_df[1]<-GENES
gene_counts_df[1]<-"GENES"
gene_counts_df[1]<-"genes"
gene_counts_df<-get_RPKM_normalised_data()
View(gene_counts_df)
a<-open_gene_counts()
View(a)
gene_counts_df[0]<-"genes"
}
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-"genes"
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
return(gene_counts_df)
}
a<-open_gene_counts()
View(a)
colnames(gene_counts_df)[1]<-"genes"
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
colnames(gene_counts_df)[1]<-"genes"
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
return(gene_counts_df)
}
a<-open_gene_counts()
View(a)
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
colnames(gene_counts_df)[0]<-"genes"
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
return(gene_counts_df)
}
a<-open_gene_counts()
View(a)
open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
#colnames(gene_counts_df)<-cols
colnames(gene_counts_df)[0]<-"genes"
#colnames(gene_counts_df)[1]<-"gene_id"
#test=read.table(paste("raw/",counts_files[9],sep=""),sep="\t")[2]
#gene_counts_df<-data.matrix(gene_counts_df)
return(gene_counts_df)
}
a<-open_gene_counts()
View(a)
#open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
View(gene_counts_df)
frame(gene_counts_df)
frame(gene_counts_df)
is.data.frame(gene_counts_df)
#open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-fread(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
packages.install("fread")
install.packages("fread")
#open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-fread(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
#open_gene_counts <-function(){
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
setnames(gene_counts_df,NULL,"gene")
View(gene_counts_df)
gene_counts_df[0,0]
gene_counts_df[0,1]
gene_counts_df[1,1]
gene_counts_df[0,1]
gene_counts_df[1,0]
gene_counts_df[0,0]
gene_counts_df$row
gene_counts_df$NULL
subset()
help(subset)
get_oncogenes_df <- function() {
oncogene_data<-read.csv("scripts/melanoma_genes_heatmap/Census_allSun Jan 15 04_37_51 2023.csv")
num_cols<-length(colnames(oncogene_data))
num_rows<-length(rownames(oncogene_data))
oncogenes<-list()
for (i in (1:num_rows)){
tumour_types<-oncogene_data[i,10]
if (grepl("melanoma",tumour_types,fixed = TRUE)){
oncogenes<-append(oncogenes,oncogene_data[i,1])
}
}
normalised_gene_counts_df<-get_RPKM_normalised_data()
filtered_gene_counts_df<-subset(normalised_gene_counts_df, rownames(normalised_gene_counts_df) %in% oncogenes)
return(filtered_gene_counts_df)
}
b<-get_oncogenes_df()
View(b)
library(factoextra)
library(cluster)
oncogenes_normalised_df<-b
scaled_normalised_gene_counts_df<-scale(oncogenes_normalised_df)
View(scaled_normalised_gene_counts_df)
#define linkage methods
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
#function to compute agglomerative coefficient
ac <- function(x) {
agnes(scaled_normalised_gene_counts_df, method = x)$ac
}
#calculate agglomerative coefficient for each clustering linkage method
sapply(m, ac)
#perform hierarchical clustering using Ward's minimum variance
clust <- agnes(scaled_normalised_gene_counts_df, method = "ward")
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(df, FUN = hcut, nstart = 25, K.max = 10, B = 50)
help(clusGap)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(df, FUN = hcut, nstart = 25, K.max = 15, B = 50)
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(df, FUN = hcut, nstart = 25, K.max = 15, B = 50)
dim(clust)
length(dim(clust))
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 15, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#perform hierarchical clustering using Ward's minimum variance
clust <- agnes(scaled_normalised_gene_counts_df, method = "ward")
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 30, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#perform hierarchical clustering using Ward's minimum variance
clust <- agnes(scaled_normalised_gene_counts_df, method = "ward")
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 50, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#perform hierarchical clustering using Ward's minimum variance
clust <- agnes(scaled_normalised_gene_counts_df, method = "ward")
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 60, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 5, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 5, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 10, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 20, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 12, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 55, K.max = 12, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 55, K.max = 50, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
50
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 50, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
View(oncogenes_normalised_df)
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 60, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 60, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
#perform hierarchical clustering using Ward's minimum variance
clust <- agnes(scaled_normalised_gene_counts_df, method = "ward")
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
library("ggfortify")
#perform hierarchical clustering using Ward's minimum variance
clust <- agnes(scaled_normalised_gene_counts_df, method = "ward")
#produce dendrogram
pltree(clust, cex = 0.6, hang = -1, main = "Dendrogram")
#calculate gap statistic for each number of clusters (up to 10 clusters)
gap_stat <- clusGap(scaled_normalised_gene_counts_df, FUN = hcut, nstart = 25, K.max = 60, B = 50)
#produce plot of clusters vs. gap statistic
fviz_gap_stat(gap_stat)
library("ggfortify")
gene_counts_df<-get_RPKM_normalised_data()
pca_res<-prcomp(gene_counts_df, scale. = TRUE)
oncogenes_df<-get_oncogenes_df()
library("ggfortify")
gene_counts_df<-get_RPKM_normalised_data()
oncogenes_df<-get_oncogenes_df()
pca_res<-prcomp(oncogenes_df, scale. = TRUE)
autoplot(pca_res, data=oncogenes_df, colour='col')
autoplot(pca_res, data=oncogenes_df, colour=colnames(oncogenes_df))
View(oncogenes_df)
iris
autoplot(pca_res)
autoplot(pca_res, data=oncogenes_df, colour=colnames(oncogenes_df), label=TRUE)
autoplot(pca_res, data=oncogenes_df,  label=TRUE)
autoplot(pca_res, data=oncogenes_df,  label=TRUE,label.size = 3)
autoplot(pca_res, data=oncogenes_df,  label=TRUE,label.size = 3, loadings=TRUE)
autoplot(kmeans(oncogenes_df, 3), data = oncogenes_df)
autoplot(kmeans(oncogenes_df, 5), data = oncogenes_df)
