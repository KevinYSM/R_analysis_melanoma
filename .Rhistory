rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
colnames(gene_counts_df)[1]<-"gene_id"
rm(list=ls())
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
cols
gene_counts_df
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
View(gene_counts_df)
scaled_gene_counts_df=scale (gene_counts_df,center=FALSE, scale=colSums(gene_counts_df)/1000000)
View(scaled_gene_counts_df)
View(gene_counts_df)
apply(gene_counts_df,1,mean)
help(apply)
apply(gene_counts_df,1,RPKM(x))
RPKM<-function(){
print(x)
}
apply(gene_counts_df,1,RPKM(x))
RPKM<-function(x){
print(x)
}
apply(gene_counts_df,1,RPKM(x))
RPKM<-function(x){
print(x)
}
RPKM<-function(x){
print(x)
}
apply(gene_counts_df,1,RPKM(x))
RPKM<-function(x){
print(x)
}
apply(gene_counts_df,1,RPKM(x))
RPKM<-function(x){
print(x)
}
apply(gene_counts_df,1,RPKM)
apply(gene_counts_df[[1]],1,RPKM)
RPKM<-function(x){
print(x)
}
apply(gene_counts_df[[1]],1,RPKM)
gene_counts_df[[1]]
gene_counts_df[[1]][1]
RPKM<-function(x){
print(x)
}
apply(gene_counts_df[[1]][1],1,RPKM)
gene_counts_df[[1]][1]
RPKM<-function(x){
print(x)
}
apply(gene_counts_df[[1]][1],1,RPKM)
RPKM<-function(x){
print(x)
}
apply(gene_counts_df[[1]][1,3],1,RPKM)
RPKM<-function(x){
print(x)
}
apply(head(gene_counts_df[[1]],3),1,RPKM)
head(gene_counts_df)
head(gene_counts_df[[1]])
head(gene_counts_df[[1]])
head(gene_counts_df[[1]],3)
apply(head(gene_counts_df[[1]][1:3]),1,RPKM)
gene_counts_df[[1]]
gene_counts_df
RPKM<-function(x){
print(x[[1]])
}
apply(gene_counts_df,1,RPKM)
RPKM<-function(x){
print(x[[0]])
}
apply(gene_counts_df,1,RPKM)
RPKM<-function(x){
a=x
}
apply(gene_counts_df,1,RPKM)
a
a
a
a=NULL
RPKM<-function(x){
a=x
}
apply(gene_counts_df,1,RPKM)
a=NULL
RPKM<-function(x){
print(x)
}
apply(gene_counts_df,1,RPKM)
a=NULL
RPKM<-function(x){
print(x)
print("!!!")
}
apply(gene_counts_df,1,RPKM)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
print(i)
}
num_rows<-length(rownames(gene_counts_df))
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
print(gene_names[i])
}
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
View(gene_lengths)
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
print(gene_lengths[gene])
}
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
print(gene_lengths[gene])
}
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
print(gene_lengths[gene,])
}
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
mean_length=gene_lengths[gene,][1]
print(mean_length)
}
View(mean_length)
mean_length
mean_length[1]
mean_length[[1]]
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
mean_length=gene_lengths[gene,][[1]]
print(mean_length)
}
gene_counts_df[4]
gene_counts_df[[4]]
gene_counts_df[,2]
gene_counts_df[1,]
gene_counts_df[1,]
gene_counts_df[1,]
gene_counts_df[1,]/2
View(gene_counts_df)
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
mean_length=gene_lengths[gene,][[1]]
gene_counts_df[i,]<-gene_counts_df[i,]/mean_length
print(mean_length)
}
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
for (i in (1:num_rows)){
gene<-gene_names[i]
mean_length=gene_lengths[gene,][[1]]
gene_counts_df[i,]<-gene_counts_df[i,]/mean_length
}
rm(list=ls())
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
cols
gene_counts_df
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
View(rows)
View(gene_counts_df)
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
View(gene_lengths)
View(gene_lengths)
View(gene_lengths)
View(gene_counts_df)
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
View(gene_counts_df)
#need to get counts in each row
for (i in (1:num_cols))
{
print(normalised_gene_counts_df[i])
}
num_cols<-length(colnames(gene_counts_df))
#need to get counts in each row
for (i in (1:num_cols))
{
print(normalised_gene_counts_df[i])
}
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#need to get counts in each row
for (i in (1:num_cols))
{
print(normalised_gene_counts_df[i])
}
#need to get counts in each row
for (i in (1:num_cols))
{
print(i)
}
View(gene_counts_df)
#need to get counts in each row
for (i in (1:num_cols))
{
print(rowSums(normalised_gene_counts_df[i]))
}
#need to get counts in each row
print(rowSums(gene_counts_df))
#need to get counts in each row
print(rowSums(gene_counts_df))
#need to get counts in each row
print(colSums(gene_counts_df))
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
perMillionScalingFactor[1]
perMillionScalingFactor[2]
gene_counts_df[1,]
gene_counts_df[1,1]
gene_counts_df[1,2]
perMillionScalingFactor[1]
perMillionScalingFactor[1,1]
perMillionScalingFactor[1,0]
perMillionScalingFactor[1,]
perMillionScalingFactor[1]
45/perMillionScalingFactor[1]
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
#2. Divide the read counts by the “per million” scaling factor. This normalizes for sequencing depth, giving you reads per million (RPM)
for (i in (1:num_cols)){
for (j in (1:num_rows)){
normalised_gene_counts_df[j,i]<-gene_counts_df[j,i]/perMillionScalingFactor[i]
}
}
View(normalised_gene_counts_df)
View(normalised_gene_counts_df)
View(normalised_gene_counts_df)
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-gene_counts_df[j,]/longest_isoform_length
}
View(gene_counts_df)
View(gene_counts_df)
View(gene_counts_df)
View(gene_counts_df)
View(normalised_gene_counts_df)
View(gene_lengths)
View(gene_lengths)
View(gene_lengths)
normalised_gene_counts_df<-gene_counts_df[j,]/longest_isoform_length
View(normalised_gene_counts_df)
#2. Divide the read counts by the “per million” scaling factor. This normalizes for sequencing depth, giving you reads per million (RPM)
for (i in (1:num_cols)){
normalised_gene_counts_df<-gene_counts_df[i,]/longest_isoform_length
}
View(normalised_gene_counts_df)
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
normalised_gene_counts_df[j,]<-gene_counts_df[j,]/longest_isoform_length
View(normalised_gene_counts_df)
longest_isoform_length
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
#2. Divide the read counts by the “per million” scaling factor. This normalizes for sequencing depth, giving you reads per million (RPM)
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
View(normalised_gene_counts_df)
normalised_gene_counts_df_1<-gene_counts_df
normalised_gene_counts_df_1<-gene_counts_df
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
#2. Divide the read counts by the “per million” scaling factor. This normalizes for sequencing depth, giving you reads per million (RPM)
for (i in (1:num_cols)){
for (j in (1:num_rows)){
normalised_gene_counts_df[j,i]<-gene_counts_df[j,i]/perMillionScalingFactor[i]
}
}
for (i in (1:num_cols)){
normalised_gene_counts_df_1[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
View(normalised_gene_counts_df)
View(normalised_gene_counts_df_1)
View(normalised_gene_counts_df)
View(normalised_gene_counts_df)
View(normalised_gene_counts_df)
View(normalised_gene_counts_df_1)
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df_1<-gene_counts_df
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/longest_isoform_length
}
quit
rm(list=ls())
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
cols
gene_counts_df
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df_1<-gene_counts_df
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/longest_isoform_length
}
View(normalised_gene_counts_df_1)
View(normalised_gene_counts_df)
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/(longest_isoform_length/1000)
}
View(normalised_gene_counts_df)
normalised_gene_counts_df[1]
normalised_gene_counts_df[1,]
normalised_gene_counts_df[1,1]
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
library("pheatmap")
install.package("pheatmap")
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
is.na(normalised_gene_counts_df) %>% table()
View(normalised_gene_counts_df_1)
View(normalised_gene_counts_df)
View(gene_counts_df)
View(gene_lengths)
View(gene_lengths)
View(normalised_gene_counts_df)
is.na(normalised_gene_counts_df)
is.na(normalised_gene_counts_df).sum()
normalised_gene_counts_df[,1]
normalised_gene_counts_df[1,]
normalised_gene_counts_df.isna().sum()
colSums(is.na(normalised_gene_counts_df))
rowNames(normalised_gene_counts_df).length()
rowNames(normalised_gene_counts_df).length
length(rowNames(normalised_gene_counts_df))
length(rownames(normalised_gene_counts_df))
length(rownames(gene_lengths))
View(gene_lengths)
View(counts_column)
#Remove N/A rows
na.omit(normalised_gene_counts_df)
#Remove N/A rows
remove_na<-na.omit(normalised_gene_counts_df)
View(remove_na)
View(normalised_gene_counts_df_1)
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
#Remove N/A rows
normalised_gene_counts_df<-na.omit(normalised_gene_counts_df)
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
pheatmap(cor(normalised_gene_counts_df))
cor(normalised_gene_counts_df)
man(cor())
help(cor)
counts_files<-list.files("RNA_gene_counts_data/raw/", include.dirs=TRUE) #gets names of all files in raw/ directory
gene_counts_df <-data.frame(matrix(nrow=33126))
cols<-list()
for (file in counts_files){
cols<-append(cols,substr(file,1,6))
counts_column<-read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[2] #reads gene counts files and converts to table
gene_counts_df[substr(file,1,6)]<-counts_column
}
rows=read.table(paste("RNA_gene_counts_data/raw/",file, sep=""), sep="\t")[1]
cols
gene_counts_df
rownames(gene_counts_df)<-rows[[1]]
gene_counts_df[1]<-NULL
#Remove first 5 rows
gene_counts_df<-head(gene_counts_df,-5)
gene_lengths<-read.table(("gene_lengths/human_gene_lengths.txt"), sep="", header=TRUE) #reads gene counts files and converts to table
row.names(gene_lengths)<-gene_lengths[[1]]
gene_lengths[[1]]<-NULL
gene_lengths<-as.data.frame.matrix(gene_lengths)
gene_lengths<-gene_lengths[order(row.names(gene_lengths)),]
gene_names<-rownames(gene_counts_df)
num_rows<-length(rownames(gene_counts_df))
num_cols<-length(colnames(gene_counts_df))
normalised_gene_counts_df<-gene_counts_df
#1.  Count up the total reads in a sample and divide that number by 1,000,000 – this is our “per million” scaling factor.
perMillionScalingFactor<-colSums(gene_counts_df)/1000000
for (i in (1:num_cols)){
normalised_gene_counts_df[,i]<-gene_counts_df[,i]/perMillionScalingFactor[i]
}
#3. Divide the RPM values by the length of the gene, in kilobases. This gives you RPKM."
for (j in (1:num_rows)){
gene<-gene_names[j]
longest_isoform_length=gene_lengths[gene,][[3]]
normalised_gene_counts_df[j,]<-normalised_gene_counts_df[j,]/(longest_isoform_length/1000)
}
#Remove N/A rows
normalised_gene_counts_df<-na.omit(normalised_gene_counts_df)
library("pheatmap")
pheatmap(cor(normalised_gene_counts_df))
heatmap(cor(normalised_gene_counts_df))
devtools::install(C:\Users\kevin\Documents\GitHub\rnaSeqPanCanClassifier)
devtools::install(C:/Users/kevin/Documents/GitHub/rnaSeqPanCanClassifier)
getwd()
devtools::install("C:/Users/kevin/Documents/GitHub/rnaSeqPanCanClassifier")
install.packages("devtools")
pheatmap(cor(normalised_gene_counts_df))
install.packages(devtools)
install.packages("devtools")
devtools::install("C:/Users/kevin/Documents/GitHub/rnaSeqPanCanClassifier")
install.packages("installr")
library(installr)
updateR()
